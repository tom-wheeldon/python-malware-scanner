import os
import yara
import argparse
import logging

def load_yara_rules_from_index(index_file_path):
    try:
        rules = yara.compile(filepath=index_file_path)
        logging.info(f"Successfully compiled YARA rules from {index_file_path}")
        return rules
    except yara.Error as e:
        logging.error(f"Error compiling YARA rules from index file: {e}")
        return None

def scan_file_with_yara(file_path, yara_rules, verbose=False):
    try:
        matches = yara_rules.match(filepath=file_path)
        if matches:
            log_message = f"Malicious file detected: {file_path}"
            if verbose:
                print(log_message)
            logging.info(log_message)
            for match in matches:
                match_info = f"  Rule: {match.rule}, Tags: {match.tags}, Meta: {match.meta}"
                if verbose:
                    print(match_info)
                logging.info(match_info)
            return True
        elif verbose:
            no_threat_message = f"No threats detected in {file_path}"
            print(no_threat_message)
            logging.info(no_threat_message)
    except Exception as e:
        logging.error(f"Error scanning {file_path} with YARA: {e}")
    return False

def scan_directory_with_yara(directory_path, yara_rules, recursive=True, verbose=False):
    malware_found = False
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            file_path = os.path.join(root, file)
            if scan_file_with_yara(file_path, yara_rules, verbose):
                malware_found = True
        if not recursive:
            break
    return malware_found

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A malware scanner using YARA rules.")
    parser.add_argument("target", type=str, help="The file or directory to scan for malware.")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output.")
    parser.add_argument("-r", "--recursive", action="store_true", help="Recursively scan directories (ignored if scanning a file).")
    parser.add_argument("--log", action="store_true", help="Enable logging to log.txt in the program directory.")

    args = parser.parse_args()

    if args.log:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        log_file_path = os.path.join(base_dir, "log.txt")
        logging.basicConfig(filename=log_file_path, filemode='w', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    yara_index_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "malware_index.yar")

    yara_rules = load_yara_rules_from_index(yara_index_file)

    if yara_rules:
        print("Scan Started.")
        if os.path.isfile(args.target):
            print(f"Scanning {args.target}...")
            logging.info(f"Scanning file with YARA: {args.target}")
            malware_found = scan_file_with_yara(args.target, yara_rules, verbose=args.verbose)
        elif os.path.isdir(args.target):
            print(f"Scanning directory {args.target}...")
            logging.info(f"Scanning directory with YARA: {args.target}")
            malware_found = scan_directory_with_yara(args.target, yara_rules, recursive=args.recursive, verbose=args.verbose)
        else:
            error_message = f"Error: {args.target} is not a valid file or directory."
            print(error_message)
            logging.error(error_message)
            exit(1)

        print("Scan Complete.")

        if malware_found:
            print("Malware detected - Please view log.txt for more info.")
        else:
            print("No Malware Detected.")
        
        logging.info("YARA Scan complete.")
    else:
        error_message = "Failed to load YARA rules."
        print(error_message)
        logging.error(error_message)
